<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1000ch.net</title>
    <link>https://1000ch.net/posts.xml</link>
    
    
    
    <updated>2016.12.10</updated>
    
    <item>
      <title>蒙古タンメン中本 新宿店の味噌卵麺</title>
      <link>https://1000ch.net/posts/2016/nakamoto.html</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/nakamoto.html</guid>
      <description>

&lt;h1 id=&#34;蒙古タンメン中本-新宿店の味噌卵麺&#34;&gt;蒙古タンメン中本 新宿店の味噌卵麺&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/1344&#34;&gt;蒙古タンメン中本 アドベントカレンダー 2016&lt;/a&gt; 4日目の記事です。&lt;/p&gt;

&lt;p&gt;中本に行って注文するのは基本的に味噌卵麺。普段は&lt;a href=&#34;https://tabelog.com/tokyo/A1303/A130301/13094387/&#34;&gt;渋谷店&lt;/a&gt;で食べているが、今日は&lt;a href=&#34;https://tabelog.com/tokyo/A1304/A130401/13001010/&#34;&gt;新宿店&lt;/a&gt;で食べてきた。今気づいたが、食べログの評価、両方とも3.5以上なのね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/nakamoto/misoranmen.jpg&#34; alt=&#34;味噌卵麺&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/nakamoto/close-up.jpg&#34; alt=&#34;味噌卵麺接写&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/nakamoto/completed.jpg&#34; alt=&#34;完食&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今年は、年間何杯食べているのかを数えるために Instagram に毎度アップロードするようにした。数えてみたところ2016年は31杯だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BN1y-gxjsTa/&#34;&gt;https://www.instagram.com/p/BN1y-gxjsTa/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BNnzO8TDu9W/&#34;&gt;https://www.instagram.com/p/BNnzO8TDu9W/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BNVwi3hD21N/&#34;&gt;https://www.instagram.com/p/BNVwi3hD21N/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BNGUH9mj8BM/&#34;&gt;https://www.instagram.com/p/BNGUH9mj8BM/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BLuutBzjF7x/&#34;&gt;https://www.instagram.com/p/BLuutBzjF7x/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BLPzZ9VjPWa/&#34;&gt;https://www.instagram.com/p/BLPzZ9VjPWa/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BK5xO77Dwbb/&#34;&gt;https://www.instagram.com/p/BK5xO77Dwbb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BKVOTFVDWUO/&#34;&gt;https://www.instagram.com/p/BKVOTFVDWUO/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BKCm1F9jCb0/&#34;&gt;https://www.instagram.com/p/BKCm1F9jCb0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BJfGATrD_My/&#34;&gt;https://www.instagram.com/p/BJfGATrD_My/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BJJ98rsjEZe/&#34;&gt;https://www.instagram.com/p/BJJ98rsjEZe/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BIl3tzVDgXh/&#34;&gt;https://www.instagram.com/p/BIl3tzVDgXh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BIcpZXYjNf7/&#34;&gt;https://www.instagram.com/p/BIcpZXYjNf7/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BIMwrIbDnio/&#34;&gt;https://www.instagram.com/p/BIMwrIbDnio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BHtQGLzjEDR/&#34;&gt;https://www.instagram.com/p/BHtQGLzjEDR/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BHQ_QPHjsKc/&#34;&gt;https://www.instagram.com/p/BHQ_QPHjsKc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BG8NcAZBpwm/&#34;&gt;https://www.instagram.com/p/BG8NcAZBpwm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BGnqN5Ihp3K/&#34;&gt;https://www.instagram.com/p/BGnqN5Ihp3K/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BGI9X2ehp3E/&#34;&gt;https://www.instagram.com/p/BGI9X2ehp3E/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BF1P61VBp0d/&#34;&gt;https://www.instagram.com/p/BF1P61VBp0d/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BFntVaMhp-z/&#34;&gt;https://www.instagram.com/p/BFntVaMhp-z/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BFfoyrWhp2H/&#34;&gt;https://www.instagram.com/p/BFfoyrWhp2H/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BFOag4ehp2_/&#34;&gt;https://www.instagram.com/p/BFOag4ehp2_/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BE2aIaEBp26/&#34;&gt;https://www.instagram.com/p/BE2aIaEBp26/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BEfNdayhp91/&#34;&gt;https://www.instagram.com/p/BEfNdayhp91/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BEXhJnlBpxN/&#34;&gt;https://www.instagram.com/p/BEXhJnlBpxN/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BEFf4phhp1e/&#34;&gt;https://www.instagram.com/p/BEFf4phhp1e/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BD-rJeJBp6f/&#34;&gt;https://www.instagram.com/p/BD-rJeJBp6f/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BDpRKjUhp-y/&#34;&gt;https://www.instagram.com/p/BDpRKjUhp-y/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BC0Iq99Bpwm/&#34;&gt;https://www.instagram.com/p/BC0Iq99Bpwm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/p/BAWm7UBhpyt/&#34;&gt;https://www.instagram.com/p/BAWm7UBhpyt/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apple WatchでApple Payを便利に使っている話</title>
      <link>https://1000ch.net/posts/2016/apple-watch-series-2.html</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/apple-watch-series-2.html</guid>
      <description>

&lt;h1 id=&#34;apple-watchでapple-payを便利に使っている話&#34;&gt;Apple WatchでApple Payを便利に使っている話&lt;/h1&gt;

&lt;p&gt;昔から腕時計を付けないタイプだが、人様の Pebble を見てからスマートウォッチに興味を持ちはじめ、その Pebble の新しいバージョンである &lt;a href=&#34;https://www.kickstarter.com/projects/597507018/pebble-2-time-2-and-core-an-entirely-new-3g-ultra&#34;&gt;Pebble 2 および上位モデルの Time 2 のプロジェクト&lt;/a&gt;が、今年5月に Kickstarter で発表された。&lt;/p&gt;

&lt;p&gt;Time 2 の Pledge を $179 で募集していたので衝動的に back して楽しみにしていた所で、今年の9月に Apple Watch Series 2 が発表される。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;衝動的に Apple Watch 2 を購入してしまって、近日中に到着予定の Pebble Time 2 がどうでも良くなってしまったアカウントがこちらです &lt;a href=&#34;https://t.co/sMaoOaeDbu&#34;&gt;https://t.co/sMaoOaeDbu&lt;/a&gt; &lt;a href=&#34;https://t.co/ZDVMx8lPIL&#34;&gt;pic.twitter.com/ZDVMx8lPIL&lt;/a&gt;&lt;/p&gt;&amp;mdash; 煎茶 (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/795301654585176064&#34;&gt;2016年11月6日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;FeliCa 対応の OS アップデートもされたし、 Time 2 の到着を待たずして Apple Watch を購入してしまった。また、奇しくも &lt;a href=&#34;https://blog.getpebble.com/2016/12/07/fitbit/&#34;&gt;Fitbit による Pebble の買収が発表され&lt;/a&gt;、Time 2 が世にでることはなくなってしまった。&lt;/p&gt;

&lt;p&gt;その Apple Watch を使い始めて1ヶ月ほど経つが、かなり便利なのでその記録。&lt;/p&gt;

&lt;h2 id=&#34;apple-payでできること&#34;&gt;Apple Payでできること&lt;/h2&gt;

&lt;p&gt;Apple Watch Series 2 は FeliCa を通した Apple Pay に対応している。概観は &lt;a href=&#34;http://www.apple.com/jp/apple-pay/getting-started/&#34;&gt;Apple Pay - 始め方 - Apple（日本）&lt;/a&gt;にあるが、これらがどのような仕組みで実現されているのかがよくわからなかったので、 Apple Pay を使いながら覚えたことを整理がてらメモ。&lt;/p&gt;

&lt;h3 id=&#34;各種カードを登録できる&#34;&gt;各種カードを登録できる&lt;/h3&gt;

&lt;p&gt;クレジットや Suica といった各種カードを Apple Pay に登録できる。登録したカード達は FeliCa を通して利用可能なので、 FeliCa に対応している店舗であればコンビニエンスストアやファミレスでクレジットカードや Suica の決済を利用できる。つまり、日本であれば &lt;strong&gt;FeliCaに対応している端末 x Apple Payに登録してあるカードの組み合わせ&lt;/strong&gt; の分だけ利用時の選択肢がある。&lt;/p&gt;

&lt;p&gt;FeliCa は、カードに FeliCa チップを内蔵することで非接触通信を実現しており、 Suica は FeliCa を利用している技術のひとつ。 FeliCa に対応している日本の iPhone 7 や Apple Watch Series 2 の Apple Pay に Suica をカードとして追加可能なのはこのためである。&lt;/p&gt;

&lt;p&gt;Apple Pay はあくまでカードを束ねてシームレスに使うための仕組みで、どの通信規格の元でApple Pay を使うかは端末次第（たぶん）と理解している。 NFC が普及している地域の iPhone の Apple Pay は NFC で通信をしている（きっと）。&lt;/p&gt;

&lt;h3 id=&#34;suicaはiphone-7とapple-watchのいずれか&#34;&gt;SuicaはiPhone 7とApple Watchのいずれか&lt;/h3&gt;

&lt;p&gt;Suica のデータは iPhone 7 で吸い取れるので、元々使っていた Suica の通勤定期券を iPhone 7 に移植し、 Bluetooth 経由で Apple Watch へ転送した。 iPhone 7 で吸い取らずとも、Suica アプリで Suica を新規作成できるので、必ずしも既存 Suica からのデータ吸収が必要というわけではない。&lt;/p&gt;

&lt;p&gt;データを吸い取られた Suica カードは、それ以降 IC カードとして使うことができない。仮にそのまま使えてしまうと、定期券がコピーされているのと同じなので当然の仕様だが、同様の理由で吸い取った Suica のデータは、ペアリングしている iPhone と Apple Watch のいずれかにしか保持できないようになっている。&lt;/p&gt;

&lt;h2 id=&#34;実際に使っているシーン&#34;&gt;実際に使っているシーン&lt;/h2&gt;

&lt;p&gt;自分の場合は Apple Watch に、通勤定期券の Suica とクレジットカードを登録している。&lt;/p&gt;

&lt;h3 id=&#34;改札を通る時&#34;&gt;改札を通る時&lt;/h3&gt;

&lt;p&gt;通勤時に JR を使っているので、改札を通る時に Apple Watch をかざせば登録している Suica が反応する。しかし &lt;a href=&#34;http://blog.horimisli.me/entry/watch2&#34;&gt;Suica狙いでApple Watch Series2を買って1週間使ってみた感想&lt;/a&gt; でも言及されているように、Apple Watch の端末パスコードロックをしている状態じゃないと反応しない。&lt;/p&gt;

&lt;p&gt;Apple Watch のパスコードロックは、「パスコードを入力する」か、「Bluetooth でペアリングしている iPhone のパスコードロックを解除する」ことで、解除できる。後述するが、基本的に Apple Watch の Bluetooth をオフにしているので、パスコード入力ということになる。そこで Apple Watch のディスプレイの小さく押し難さがネックになってくるが、「定期入れをポケット or カバンから取り出してかざす」よりは確実に楽な気はしている。&lt;/p&gt;

&lt;h3 id=&#34;店舗での会計時&#34;&gt;店舗での会計時&lt;/h3&gt;

&lt;p&gt;Apple Watch を使うようになってから自然とこれで会計を済まそうと意識し始めたが、思っていたより Suica（というか FeliCa）に対応している店舗が多い。コンビニエンスストアや飲食チェーンの大半は対応しているので、会計時はかなりスムースに済ませられる。「財布を取り出して、支払いして、お釣りとレシートを閉まって、ポケットに戻す」という動作が、かざすだけになる。&lt;/p&gt;

&lt;p&gt;気になる点としては、かざす店舗側の端末によっては Apple Watch を Apple Pay を待機状態(?)にしなくてはならない場合がある。わかっている所だと、ローソンとか、ローソンとか、ローソンとか（ &lt;a href=&#34;http://rebuild.fm/166a/&#34;&gt;Aftershow 166: Escape Into Reality (naoya)&lt;/a&gt; でも言及されてる）。とはいえ、Apple Watch の物理ボタンをダブルクリックするだけなので、パスコードロックよりは断然楽である。&lt;/p&gt;

&lt;h3 id=&#34;オフィスに入館する時&#34;&gt;オフィスに入館する時&lt;/h3&gt;

&lt;p&gt;オフィスへ入館するための IC カードも Suica にできるので、 Apple Watch で入館できる。これも非常に便利なのだが、前述のように Apple Watch を待機状態にしないと反応してくれない。こちらも物理ボタンのダブルクリックで OK なので、「入館証を取り出してかざしてしまう」という動作が短縮された。&lt;/p&gt;

&lt;h2 id=&#34;運用上の工夫&#34;&gt;運用上の工夫&lt;/h2&gt;

&lt;p&gt;工夫というかやってること。&lt;/p&gt;

&lt;h3 id=&#34;右手に付けるか左手に付けるか&#34;&gt;右手に付けるか左手に付けるか&lt;/h3&gt;

&lt;p&gt;読み取り機器が自分に対して右手側にあるか左手側にあるかはコントロール不能なので、どちらでも良かったのだが、最近は左手に落ち着いている。左手側に多い印象だが、改札は右手側にあるので左手だとかざしにくい。多少かざしにくいだけならまだしも、もたつくと後続に影響があるので若干の慣れが必要である。&lt;/p&gt;

&lt;h3 id=&#34;充電&#34;&gt;充電&lt;/h3&gt;

&lt;p&gt;Bluetooth で常に iPhone と繋げていると電池を消耗しそうなので、常に機内モードにしている。機内モードでも、会計やら改札の突破やらオフィスへの入館やらはできることを確認済。&lt;/p&gt;

&lt;p&gt;iPhone と繋げておくメリットとしては、 iPhone に来る通知がそのまま Apple Watch に流れて来たり、iPhone のパスコードロック解除が Apple Watch と連動するなどがあるが、自分の使いたい機能ではないので思い切って機内モードにした。&lt;/p&gt;

&lt;p&gt;日常を Apple Watch に統一することで便利になる反面、 Apple Watch の電池が切れてしまうとマズい。 &lt;a href=&#34;http://www.apple.com/jp/watch/battery.html&#34;&gt;Apple のバッテリーテストによると1日のバッテリー駆動時間は最大18時間&lt;/a&gt;とのことだが、機内モードにしているおかげ(?)と時間を見る頻度がそこまで多くないのも手伝って、2~3日は充電せずに使えている。あとはうっかり電池が切れてしまった時のために充電機器を持ち歩くようにはしている（基本的にしなくて済んでいるが）。&lt;/p&gt;

&lt;h3 id=&#34;オートチャージはしてない&#34;&gt;オートチャージはしてない&lt;/h3&gt;

&lt;p&gt;JR 東日本の提供するビューカードを登録すると、 Apple Pay を介して Suica へのオートチャージができるらしいが、メインで使っている MasterCard なので利用できていない。自動でできないだけで、 Apple Watch 上のクレジットカードから Suica へのチャージは手動でできるので、都度10000円くらいずつチャージしている。移行予定も今のところないが、オートチャージなら更に便利だと思う。オートチャージは都度決済が必要そうだが、この場合は iPhone と接続しておかないとできなかったりするんだろうか。&lt;/p&gt;

&lt;h2 id=&#34;apple-watchのその他&#34;&gt;Apple Watchのその他&lt;/h2&gt;

&lt;p&gt;Apple Watch Series 2 の目玉の機能は Apple Pay 対応だと思うが、他にも便利な機能がいくつかある。&lt;/p&gt;

&lt;h3 id=&#34;フィットネス&#34;&gt;フィットネス&lt;/h3&gt;

&lt;p&gt;健康を意識してたまにランニングをするが、走ったコースや距離、時間などの様々なデータを記録したい。これを今までは iPhone で記録していたのでランニングの最中に気になって仕方がなかったが、Apple Watch で同じことができるのでランニングの時に iPhone を携帯する必要がなく、煩わしさが一切なくなった。&lt;/p&gt;

&lt;p&gt;記録したデータは、 iPhone と Bluetooth で繋がったタイミングで自動的に同期される。&lt;/p&gt;

&lt;h3 id=&#34;深呼吸やスタンドアップのリマインド&#34;&gt;深呼吸やスタンドアップのリマインド&lt;/h3&gt;

&lt;p&gt;仕事柄、座ってパソコンに向かう時間が長い。ずっと座っていると身体にあまりよろしくなさそうだが、これをケアして Apple Watch が一定間隔で「1分間立ち上がりましょう」のリマインドをしてくれる。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;安くはないが、買い。ウェアラブルデバイスの便利さをちゃんと体感できた気がした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>esaをElectronでラップしてアプリにした</title>
      <link>https://1000ch.net/posts/2016/esa-app.html</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/esa-app.html</guid>
      <description>

&lt;h1 id=&#34;esaをelectronでラップしてアプリにした&#34;&gt;esaをElectronでラップしてアプリにした&lt;/h1&gt;

&lt;p&gt;※この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2016/electron&#34;&gt;Electron Advent Calendar 2016&lt;/a&gt; 1日目の記事です。&lt;/p&gt;

&lt;p&gt;プロジェクトで esa を頻繁に使っているので、 Electron でラップして Dock に常駐できるようにした。鳥から連想して、ウズラを意味する Quail という名前にしてみたが、深い意味はない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/esa-app/demo.png&#34; alt=&#34;Quail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;インストールするには &lt;a href=&#34;https://github.com/1000ch/quail/releases&#34;&gt;1000ch/quail/releases&lt;/a&gt; からアーカイブファイルをダウンロードして、アプリケーションファイルを任意の場所に配置してもらうだけ。&lt;/p&gt;

&lt;h2 id=&#34;サードパーティーesaツール&#34;&gt;サードパーティーesaツール&lt;/h2&gt;

&lt;p&gt;ありがたいことに&lt;a href=&#34;https://docs.esa.io/posts/158&#34;&gt;サードパーティーesaツール&lt;/a&gt;に載せてもらった。Windows ビルドも用意でき次第、追加してもらおう。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【お知らせ】esa 非公式 Mac/Linux app “Quail” by &lt;a href=&#34;https://twitter.com/1000ch&#34;&gt;@1000ch&lt;/a&gt; をサードパーティーesaツールに追加しました ( ⁰⊖⁰) &lt;a href=&#34;https://twitter.com/hashtag/%EF%BE%84%EF%BE%89%EF%BD%BA%EF%BE%84?src=hash&#34;&gt;#ﾄﾉｺﾄ&lt;/a&gt;&lt;a href=&#34;https://t.co/3H2SQqj6H6&#34;&gt;https://t.co/3H2SQqj6H6&lt;/a&gt;&lt;a href=&#34;https://t.co/Ap6RJZESIj&#34;&gt;https://t.co/Ap6RJZESIj&lt;/a&gt;&lt;/p&gt;&amp;mdash; esa_io (@esa_io) &lt;a href=&#34;https://twitter.com/esa_io/status/802846086972833792&#34;&gt;2016年11月27日&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;使い手のコンテキストとパフォーマンス&#34;&gt;使い手のコンテキストとパフォーマンス&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.net/posts/2016/trello-app.html&#34;&gt;TrelloをElectronでラップしてアプリにした&lt;/a&gt;でコンテキストの区別の話をしたが、他にも気づいたことがある。&lt;/p&gt;

&lt;p&gt;画面遷移が少ない Trello とは異なり esa では遷移が頻繁に発生する。 esa は SSR だが SPA ではないので2回目以降のナビゲーションでは画面が白くなる時間があるのだが、これが案外気になる。これもコンテキストの話だ。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Web アプリを Electron でラップして思うのは「 Dock に常駐するアプリなのに画面真っ白になるのなー」という気持ち。ブラウザだと気にならないのにネイティブアプリにした途端、不思議なくらい気になる。&lt;/p&gt;&amp;mdash; 1000ch (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/802894791025389575&#34;&gt;2016年11月27日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;これについては次のような安直スクリプトを各ページに仕込んで、主な導線への遷移を高速化しようとしたがダメだった。静的なリソースじゃないとですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createPrerender(url) {
  const link = document.createElement(&#39;link&#39;);
  link.rel = &#39;prerender&#39;;
  link.href = url;
  return link;
}

document.addEventListener(&#39;DOMContentLoaded&#39;, () =&amp;gt; {
  const pathname = location.pathname;
  const head = document.head;
  const baseURL = `${location.protocol}//${location.hostname}`;
  const pathnames = [
    &#39;/posts/new&#39;,
    &#39;/&#39;,
    &#39;/posts&#39;,
    &#39;/tags&#39;,
    &#39;/team&#39;
  ];

  pathnames
    .filter(u =&amp;gt; u !== pathname)
    .forEach(u =&amp;gt; head.appendChild(createPrerender(`${baseURL}${u}`)));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また Electron でラップすることでオムニボックスが見えなくなるので UI としてスッキリする反面、閲覧ページの URL を参照できない。結果、URL をシェアできない。また esa の URL をクリックしても起動するのは Quail ではなく Chrome なので、 iOS や Android のようなディープリンクの仕組みが macOS にあれば良いなと思いつつ、今後更にブラウザが Appy になっていって、私達が Web をアプリと認識する未来が来るのかどうかに思いを馳せる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>沖縄旅行最終日</title>
      <link>https://1000ch.net/posts/2016/okinawa-3rd-day.html</link>
      <pubDate>Sat, 19 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/okinawa-3rd-day.html</guid>
      <description>

&lt;h1 id=&#34;沖縄旅行最終日&#34;&gt;沖縄旅行最終日&lt;/h1&gt;

&lt;p&gt;最終日は飛行機の時間もあり、観光に取れた時間は少なかった。&lt;/p&gt;

&lt;h2 id=&#34;川平湾&#34;&gt;川平湾&lt;/h2&gt;

&lt;p&gt;島の北西にある川平湾でグラスボートに乗ってきた。グラスボートは船の中央部の底が透明になっており、そこから海中の様子を見ることができる。川平湾の海は海の底が見れるくらい綺麗なので、魚・貝・珊瑚といった沖縄の海ならではのものを見れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-3rd-day/kabira.jpg&#34; alt=&#34;川平湾&#34; /&gt;&lt;/p&gt;

&lt;p&gt;海の色の美しさはココが一番だったと思う。石垣島の観光スポットとして、川平湾は行って損は無さそう。&lt;/p&gt;

&lt;h2 id=&#34;石垣空港&#34;&gt;石垣空港&lt;/h2&gt;

&lt;p&gt;あとは石垣空港でフライトまでの時間を過ごすことにした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-3rd-day/steak.jpg&#34; alt=&#34;石垣牛のステーキ丼&#34; /&gt;&lt;/p&gt;

&lt;p&gt;写真は空港内の売店で食べられる石垣牛のステーキ丼970円。あとはお土産を購入したが、今回の旅行で一番金を使ったかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;今回の沖縄旅行のまとめ&#34;&gt;今回の沖縄旅行のまとめ&lt;/h2&gt;

&lt;p&gt;アレがアレで飲み歩きが出来なかったが、今回の個人的な収穫としては次の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;竹富島の西桟橋&lt;/strong&gt; には是非行っておきたい&lt;/li&gt;
&lt;li&gt;マリンスポーツは全般的に楽しい（友人談）&lt;/li&gt;
&lt;li&gt;ANA インターコンチネンタルはとても良い&lt;/li&gt;
&lt;li&gt;羽田・石垣間はやはり直行便が楽である&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みなさんお疲れ様でした。&lt;/p&gt;

&lt;p&gt;余談だが、最近買った Apple Watch がなかなか活躍してくれた。日本国内であれば Suica が使える所は非常に多いと感じる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>沖縄旅行2日目</title>
      <link>https://1000ch.net/posts/2016/okinawa-2nd-day.html</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/okinawa-2nd-day.html</guid>
      <description>

&lt;h1 id=&#34;沖縄旅行2日目&#34;&gt;沖縄旅行2日目&lt;/h1&gt;

&lt;p&gt;天気にも恵まれ終日自由行動だったので、予め立てていた計画通り離島散策を実施した。&lt;/p&gt;

&lt;h2 id=&#34;波照間島&#34;&gt;波照間島&lt;/h2&gt;

&lt;p&gt;波照間島は日本の最南端にある有人島で、石垣島からはフェリーに乗って45分程で到着する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/rental-cycle.jpg&#34; alt=&#34;レンタルサイクル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;島内は歩いて散策するには広いので、レンタルサイクルにて自転車を借りる。1人500円でママチャリをゲット。島内は思った以上に高低差があるので、下りはさておき、坂道を上るのは中々辛かった。2000円で電動自転車が借りられるならそちらを選んでいただろう。なかったけど。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/hateruma-road.jpg&#34; alt=&#34;波照間島&#34; /&gt;&lt;/p&gt;

&lt;p&gt;島内は見渡す限りさとうきび畑の田園風景が続く。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/goats.jpg&#34; alt=&#34;道端のヤギ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;島内には野生ではないヤギが居る。自転車で巡っている最中に、放たれているヤギと繋がれているヤギ、合わせて20頭程は見かけただろう。&lt;/p&gt;

&lt;p&gt;親ヤギは繋げておいて、子ヤギは放して飼っているということを住民の人に聞いた。こうすることで、子ヤギが餌となる植物を島内を散歩しながら確保し、最終的には親元まで戻ってくるらしい。なんというエコシステム。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/milestone.jpg&#34; alt=&#34;日本最南端の牌&#34; /&gt;&lt;/p&gt;

&lt;p&gt;せっかく日本最南端の島に来たので日本最南端の場所に行こうということで、日本最南端の牌があるスポットに行ってきた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/southest-cape.jpg&#34; alt=&#34;日本最南端の場所&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/cliff.jpg&#34; alt=&#34;日本最南端の崖&#34; /&gt;&lt;/p&gt;

&lt;p&gt;写真のような断崖絶壁の場所だった。こうして日本最南端に来てみると、今度は日本最北端の場所に行ってみたくなるものだ。&lt;/p&gt;

&lt;p&gt;次は、日本最南端の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9A%E3%83%A0%E3%83%81%E6%B5%9C&#34;&gt;ペムチ浜&lt;/a&gt;に向かう。途中、明らかに自然発生ではない防空壕のような穴があった。戦争の名残だろうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/pemuchi.jpg&#34; alt=&#34;ペムチ浜&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通の砂浜だった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/cat.jpg&#34; alt=&#34;猫&#34; /&gt;&lt;/p&gt;

&lt;p&gt;猫もいた。近づくと地面に身体を擦り付けていた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/soki.jpg&#34; alt=&#34;ソーキそば&#34; /&gt;&lt;/p&gt;

&lt;p&gt;お昼の時間になったので、民宿件ランチスポットとなっている民家にて、ソーキそばを食べる。初日にソーキそばを食べてアレしたので、若干のトラウマがあったものの、心配を他所に美味しかった。&lt;/p&gt;

&lt;p&gt;波照間島の次は竹富島を目指すが、波照間島から竹富島へ直行するフェリーはないので、ひとまず石垣島へ帰還する。この帰りのフェリーが尋常じゃないほど揺れたが、竹富島内を自転車で巡るのが余程疲れたのか眠っていた。人間どこでも眠れるんだなと思った。&lt;/p&gt;

&lt;h2 id=&#34;竹富島&#34;&gt;竹富島&lt;/h2&gt;

&lt;p&gt;竹富島は石垣島からフェリーで10分程の距離に位置する有人島。人口は300人程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/shima.jpg&#34; alt=&#34;水牛のシマ君&#34; /&gt;&lt;/p&gt;

&lt;p&gt;島内は歩いて観光もできるが、水牛車のツアーがあったのでひとまずそちらを利用することに。水牛のシマ君が案内してくれた。島内の水牛にはヨーロッパ系とアジア系がいて、シマ君はヨーロッパ系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/europe.jpg&#34; alt=&#34;シマ君の顔&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一般的にヨーロッパ系はアジア系より身体が一回り大きく、怠け者な性格らしい。一方でアジア系は真面目で働き者らしいが、これは水牛の用途が関係しているらしく、ヨーロッパでは主に乳製品が目的なのに対しアジアは農耕用であるため、それがこのような性格的な傾向にも表れているとのこと。&lt;/p&gt;

&lt;p&gt;見分けは身体の大小ではなく角を見れば一発で、角が丸く渦巻いているのがヨーロッパ系、シュッと真っ直ぐ伸びているのがアジア系らしい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/settlement.jpg&#34; alt=&#34;竹富島の集落&#34; /&gt;&lt;/p&gt;

&lt;p&gt;竹富島では、これぞ沖縄と言わんばかりの伝統的な民家の風景が見られる。こうした伝統的な風景を守るために、竹富島の家は「平屋で赤レンガの屋根の〜…」といった条件を満たす必要があるそう。確かに、2階建ての家屋はほとんどなかった気がする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/hibiscus.jpg&#34; alt=&#34;ハイビスカス&#34; /&gt;&lt;/p&gt;

&lt;p&gt;綺麗なハイビスカス。沖縄らしかったので撮影。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/west-pier.jpg&#34; alt=&#34;西桟橋&#34; /&gt;&lt;/p&gt;

&lt;p&gt;シマ君に島内を案内してもらった後は、西桟橋に行ってきた。写真の通り「ここが天国か」と思わされるような、静寂に包まれた海だった。「沖縄旅行で離島に行かないのは素人」なんていうジョークもたまに聞くが、 &lt;strong&gt;竹富島の西桟橋&lt;/strong&gt; は今まで見た光景で一番凄かったかもしれない。何時間でもボーッとしていられそうだった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/coastline.jpg&#34; alt=&#34;海岸線&#34; /&gt;&lt;/p&gt;

&lt;p&gt;西桟橋から望む竹富島の海岸線。ちょうどこの反対側に幻の砂浜という場所もあるが、遠くて写真には収めていない…。&lt;/p&gt;

&lt;h2 id=&#34;石垣牛を食す&#34;&gt;石垣牛を食す&lt;/h2&gt;

&lt;p&gt;夕食は&lt;a href=&#34;https://tabelog.com/okinawa/A4705/A470501/47010514/&#34;&gt;てっぺん&lt;/a&gt;というお店で。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-2nd-day/niku.jpg&#34; alt=&#34;石垣牛の肉寿司&#34; /&gt;&lt;/p&gt;

&lt;p&gt;料理全般良かったが、石垣牛の肉寿司がひときわ美味しかった。写真でお楽しみください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>沖縄旅行1日目</title>
      <link>https://1000ch.net/posts/2016/okinawa-1st-day.html</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/okinawa-1st-day.html</guid>
      <description>

&lt;h1 id=&#34;沖縄旅行1日目&#34;&gt;沖縄旅行1日目&lt;/h1&gt;

&lt;p&gt;前日入りの甲斐あって6:30起床で済んだので、7:00集合を物ともしなかった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/haneda.jpg&#34; alt=&#34;羽田空港で集合&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;羽田空港を出発-那覇空港へ&#34;&gt;羽田空港を出発、那覇空港へ&lt;/h2&gt;

&lt;p&gt;なんだかんだで2:00くらいまで飲んでいたので微妙に二日酔いを感じつつ、那覇空港への飛行機へ乗り込む。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/before-flight.jpg&#34; alt=&#34;那覇へのフライト前&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/haneda-naha.jpg&#34; alt=&#34;那覇へのフライト中&#34; /&gt;&lt;/p&gt;

&lt;p&gt;羽田→那覇のフライトがかなり遅れたせいで、乗り継ぎにバタついた。直行便のありがたさを知る。&lt;/p&gt;

&lt;h2 id=&#34;沖縄本島を経て石垣島へ&#34;&gt;沖縄本島を経て石垣島へ&lt;/h2&gt;

&lt;p&gt;石垣島に来るのは人生2回目で、その時は夏だった。その時は漠然と暑かった記憶があるが、今日は11月の半ばというのに気温が28度あって、想像以上の暑さだった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/ishigaki.jpg&#34; alt=&#34;石垣空港&#34; /&gt;&lt;/p&gt;

&lt;p&gt;初日はマリンスポーツ組・食い倒れ組などに分かれて、石垣島を散策するプラン。天気にも恵まれて、良い旅行になりそうである。&lt;/p&gt;

&lt;h2 id=&#34;味処のりば食堂&#34;&gt;味処のりば食堂&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://tabelog.com/okinawa/A4705/A470501/47002285/&#34;&gt;のりば食堂&lt;/a&gt;という処で、豆腐そばとゴーヤチャンプルーを食した。食べログのスコア3.5~という数字のみをアテにしていったが、とても美味しかった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/goya.jpg&#34; alt=&#34;ゴーヤチャンプルー&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/tofu-soba.jpg&#34; alt=&#34;豆腐そば&#34; /&gt;&lt;/p&gt;

&lt;p&gt;…と思った矢先に体調不良に見舞われ、昼食後から戦線離脱して病院へ。その後ホテルへ直行して体調の回復を待つ…&lt;/p&gt;

&lt;h2 id=&#34;anaインターコンチネンタル石垣リゾート&#34;&gt;ANAインターコンチネンタル石垣リゾート&lt;/h2&gt;

&lt;p&gt;今回の旅行でお世話になるホテルは&lt;a href=&#34;https://www.anaintercontinental-ishigaki.jp/&#34;&gt;ANAインターコンチネンタル石垣リゾート&lt;/a&gt;。部屋から望むオーシャンビューが素晴らしいが、撮り損ねたのでまた明日。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/entrance.jpg&#34; alt=&#34;エントランス&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-1st-day/robby.jpg&#34; alt=&#34;ホテルロビー&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>沖縄旅行0日目</title>
      <link>https://1000ch.net/posts/2016/okinawa-0th-day.html</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/okinawa-0th-day.html</guid>
      <description>

&lt;h1 id=&#34;沖縄旅行0日目&#34;&gt;沖縄旅行0日目&lt;/h1&gt;

&lt;p&gt;明日からプロジェクトメンバーでの沖縄旅行が始まる。集合が7:00ということで朝が辛いことが予想されるので前日入りしようと考え、羽田空港に併設されている&lt;a href=&#34;http://first-cabin.jp/locationlist/haneda-terminal1.html&#34;&gt;FIRST CABIN 羽田ターミナル1&lt;/a&gt;に宿泊することにした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-0th-day/haneda.jpg&#34; alt=&#34;羽田空港&#34; /&gt;&lt;/p&gt;

&lt;p&gt;国際線ターミナルは24時間営業だが、国内線ターミナルにある飲食店はだいたい21:00あたりで閉まってしまうので注意が必要（FIRST CABIN は国内線第一ターミナルにある）。食事を羽田空港で済ませようとしている場合は、お目当てのお店の営業時間を調べておいたほうが良い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-0th-day/mall.jpg&#34; alt=&#34;国内線モール&#34; /&gt;&lt;/p&gt;

&lt;p&gt;国内線ターミナル夜の人が少ない空港は新鮮な気分を味わえる。&lt;/p&gt;

&lt;h2 id=&#34;first-cabin-羽田ターミナル1&#34;&gt;FIRST CABIN 羽田ターミナル1&lt;/h2&gt;

&lt;p&gt;FIRST CABIN はカプセルホテルのチェーンである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-0th-day/outside.jpg&#34; alt=&#34;外観&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大浴場やシャワールーム、ラウンジ、Wi-Fi、各種アメニティも完備しており、静かで快適に過ごせる。モーニングコールもしてくれるので、次の朝の早起きをあまり気にしなくて良い精神的開放感はかなり良い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-0th-day/rounge.jpg&#34; alt=&#34;ラウンジ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ラウンジでは皆が思い思いに時間を潰している。私は前泊を決意した同僚2人と酒を飲みながら話をした。&lt;/p&gt;

&lt;h2 id=&#34;レストランあずさ&#34;&gt;レストランあずさ&lt;/h2&gt;

&lt;p&gt;仕事終わりに羽田空港に向かったが、前述の通り注意しなくてはならない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/okinawa-0th-day/food.jpg&#34; alt=&#34;天ぷらうどん&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tabelog.com/tokyo/A1315/A131504/13135148/&#34;&gt;レストランあずさ&lt;/a&gt;で天ぷらうどんを食べた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TrelloをElectronでラップしてアプリにした</title>
      <link>https://1000ch.net/posts/2016/trello-app.html</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/trello-app.html</guid>
      <description>

&lt;h1 id=&#34;trelloをelectronでラップしてアプリにした&#34;&gt;TrelloをElectronでラップしてアプリにした&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; を Electron でラップしただけの単純なアプリケーション、&lt;a href=&#34;https://github.com/1000ch/whale&#34;&gt;Whale&lt;/a&gt; をリリースした。 Trello という名前が付けられないので色から安直に連想して Whale とした。こちらは Mac で起動している様子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/trello-app/demo.png&#34; alt=&#34;Whale&#34; /&gt;&lt;/p&gt;

&lt;p&gt;インストールするには &lt;a href=&#34;https://github.com/1000ch/whale/releases&#34;&gt;1000ch/whale/releases&lt;/a&gt; からアーカイブファイルをダウンロードして、アプリケーションファイルを任意の場所に配置してもらうだけ。&lt;/p&gt;

&lt;h2 id=&#34;electronでラップする理由&#34;&gt;Electronでラップする理由&lt;/h2&gt;

&lt;p&gt;Web 版の Trello はよくできていて、 Electron でラップしないと実現できない機能は思い当たらない。&lt;/p&gt;

&lt;p&gt;Slack のアプリも Electron でラップしているが、 Slack のチームを左カラムにまとめるという目的がある。これはチーム単位でユニークな URL が存在しているため、ブラウザでは難しい。ブラウザで複数チームを使うにはタブを個別に開いておく必要がある。&lt;/p&gt;

&lt;p&gt;また、アプリケーションにする理由としてコンテキストの区別がある。「ブラウザは●●を閲覧するため、 Atom は◯◯を編集するため、…」のように、アプリケーション単位で用途を分けることもあるので、もし Trello を別コンテキストにしたい需要があれば、便利かもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>開発合宿 in 山喜旅館</title>
      <link>https://1000ch.net/posts/2016/yamaki.html</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/yamaki.html</guid>
      <description>

&lt;h1 id=&#34;開発合宿-in-山喜旅館&#34;&gt;開発合宿 in 山喜旅館&lt;/h1&gt;

&lt;p&gt;静岡県伊豆伊東にある&lt;a href=&#34;http://www.ito-yamaki.jp/&#34;&gt;山喜旅館&lt;/a&gt;へ、1泊2日の開発合宿にプロジェクトメンバーと行ってきた。渋谷に出勤しているとどうしてもまとまった時間が取れないこともあり、プロジェクトの技術的負債を返済するべく、静岡へ赴いた。&lt;/p&gt;

&lt;h2 id=&#34;山喜旅館&#34;&gt;山喜旅館&lt;/h2&gt;

&lt;p&gt;山喜旅館は静岡県JR伊東駅から徒歩7分の立地にある老舗の旅館。開発合宿の地として有名で、数々の実績がある温泉宿である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.find-job.net/startup/devcamp-2013&#34;&gt;エンジニアが選ぶ。開発合宿で泊まりたい日本の宿7選【2013年版】&lt;/a&gt;
− &lt;a href=&#34;http://hrnabi.com/2015/06/15/8336/&#34;&gt;IT技術者必見！　一度は行きたい「開発合宿所」10選&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://agency-star.com/freelance/articles/377/&#34;&gt;開発合宿にオススメ！旅館5選（Wi-Fiやモニタなど充実設備！）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://career.levtech.jp/guide/knowhow/article/52/&#34;&gt;【2016年版】エンジニアにおすすめの開発合宿所4選＆企画のポイント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アクセス&#34;&gt;アクセス&lt;/h3&gt;

&lt;p&gt;JR品川駅→JR熱海駅→JR伊東駅というルートで、品川から熱海までは新幹線こだまで36分、熱海から伊東までは伊東線に乗り換えて各駅停車の電車で25分程なので、なんだかんだで1時間半程で現地に到着してしまうという距離感。&lt;/p&gt;

&lt;h3 id=&#34;設備&#34;&gt;設備&lt;/h3&gt;

&lt;p&gt;設備としては、24時間解放の温泉・懐石料理・Wi-Fi・会議室・アメニティ・アダプタや延長コードの貸出・近辺のコンビニなどが挙げられる。&lt;/p&gt;

&lt;p&gt;会議室を借りてそこで開発をしていたが、Wi-Fiはやや重く時折ストレスを感じながらの作業になった。13人が同時に繋いでいた状況で重さを感じたので、もしかしたら4~5人なら重さは気にならないのかもしれない。ベストエフォートとは言え、もう少し潤沢だと嬉しかった。&lt;/p&gt;

&lt;p&gt;電源についてはタコ足延長コードの貸出もあったので不自由はなく、椅子と机については立派なものではないので長時間座っていると腰痛を招くかもしれない。が、旅館にアーロンチェアを望むのもアレなので、運用でカバーしたいところだ。&lt;/p&gt;

&lt;h3 id=&#34;雰囲気&#34;&gt;雰囲気&lt;/h3&gt;

&lt;p&gt;伊東駅からほど歩くと、風情ある外観に出迎えられる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/yamaki/outside.jpg&#34; alt=&#34;山喜旅館外観&#34; /&gt;&lt;/p&gt;

&lt;p&gt;良い意味で老舗旅館という感じで、新しくはないけど清潔に保たれている様子。海辺という立地もあり風が強かったが、窓はガタガタ騒がしい。今回に関して言えば、会議室に立て籠もって開発していたせいで部屋でゆっくりした時間はなかったので、それを聴いたのも寝る直前だけ。疲れ果てていたので耽る間もなく寝た。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/yamaki/inside.jpg&#34; alt=&#34;山喜旅館内観&#34; /&gt;&lt;/p&gt;

&lt;p&gt;外観だけでなく内観も情緒に溢れている。宿泊者にはコーヒー☕のサービスがあったので、ありがたく利用させてもらった。&lt;/p&gt;

&lt;h2 id=&#34;1日目&#34;&gt;1日目&lt;/h2&gt;

&lt;p&gt;朝9:00に品川に集合して出発すると昼には現地に着いていた。会議室に入って、机などをセッティングして開発できる環境を整えてから昼食のために&lt;a href=&#34;https://tabelog.com/shizuoka/A2205/A220503/22003774/&#34;&gt;楽味家まるげん&lt;/a&gt;に向かう。会議室にある机や椅子は自由に使っていいけど、撤収するときはもとに戻してねというスタイル。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/yamaki/horse-mackerel.jpg&#34; alt=&#34;鯵丼&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昼食を終えるとセブンイレブンで飲み物やお菓子などの買い出しをしてから旅館に戻って、旅館の夕食の時間（19:00~）までしばし作業をする。&lt;/p&gt;

&lt;p&gt;夕食後（~20:00）から作業を再開し、かれこれ22:00まで続いた。22:00の段階で一応初日終了の合図はされたものの、作業のキリが悪いのか皆再び作業に戻る。そこからは買いだした酒を飲みはじめたり、合宿に来ていないメンバーから差し入れを頂いたり、Hangoutしたりとゆるりと休憩ムードへ。温泉に使ってからもまた作業に戻ったりして、結局寝たのは日付が変わった2:00頃だった。&lt;/p&gt;

&lt;h2 id=&#34;2日目&#34;&gt;2日目&lt;/h2&gt;

&lt;p&gt;7:00起床というスケジュールだったが、案外皆起きてくる。昼前まで作業の続き。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/yamaki/early-morning.jpg&#34; alt=&#34;2日目早朝&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2日目の昼食は&lt;a href=&#34;https://tabelog.com/shizuoka/A2205/A220503/22003157/&#34;&gt;うなぎのまとい&lt;/a&gt;というところで鰻重を食べた。非常に美味しかった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/yamaki/eel.jpg&#34; alt=&#34;鰻重&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昼食を終えて例のごとくコンビニに寄ってから旅館に戻ると夕方の成果発表までラストスパート。夕方に各チームに分かれての成果発表として、チームで抱える課題・この合宿での成果・今後の課題などのプレゼンテーションを行った。&lt;/p&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;合宿の目的として技術的負債の返却（の足がかり）だったので、やるべきことが明確な分、事前の準備もしやすく現地での作業も悩む時間は少なかったのではないか。事前にピックアップした技術的負債を全て消化しきれなかったチームもあったが、それはあまり気にしなくて良いと思う。負債の多寡に対してリソースは限られているので、その場でどうするかより今後の開発で継続的にリファクタリングをしていくきっかけにすることが重要なわけで（や、もちろん返却しきるに越したことはない）。言うなれば日々のFacebookを見る時間を削ってリファクタリングできるのだから。&lt;/p&gt;

&lt;p&gt;負債を返却することを目的にした合宿を頼りにすると、人によっては普段の開発での心構えが弱くなりそうなのでそれは注意が必要。とは言え、温泉地に赴いてリファクタリングだけに集中することは大事だし、楽しいし、事業の一環として（表現がやや無理矢理だが）許容してもらえるのは非常にありがたいことだ。マンネリ化するのも良くないので、クオーター・半期に1回くらい行けると合宿としての意義が生まれやすいかもしれない。あとは、1泊2日だとそれなりに移動に疲弊してしまうので、できれば2泊3日だとより良かった。この辺は業務との兼ね合いもあるので難しいけど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift 3 における非同期処理</title>
      <link>https://1000ch.net/posts/2016/dispatch-queue.html</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/dispatch-queue.html</guid>
      <description>

&lt;h1 id=&#34;swift-3における非同期処理&#34;&gt;Swift 3における非同期処理&lt;/h1&gt;

&lt;p&gt;自作の &lt;a href=&#34;https://itunes.apple.com/app/id1090705533&#34;&gt;iOS クライアント&lt;/a&gt;のコードを &lt;a href=&#34;https://github.com/1000ch/PinFeed/commit/d3332b09f3613867502d851fd0d337284d1c2b16&#34;&gt;Swift 3 に移行した&lt;/a&gt;。その時に非同期処理について色々調べたのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;gcd-grand-central-dispatch&#34;&gt;GCD (Grand Central Dispatch)&lt;/h2&gt;

&lt;p&gt;macOS や iOS といった Apple のプラットフォームにおいて非同期で処理したい場合は GCD (Grand Central Dispatch) という仕組みを使う。&lt;/p&gt;

&lt;p&gt;UI に関する更新はメインスレッドで行う必要があるので &lt;code&gt;dispatch_get_main_queue()&lt;/code&gt; で取得するメインキューに処理を追加し、通信などの非同期でも差し支えない処理はグローバルディスパッチキューという並列処理用のキューを &lt;code&gt;dispatch_get_global_queue()&lt;/code&gt; で参照する。それぞれのキューに処理を追加するには同期か非同期かを、 &lt;code&gt;dispatch_sync()&lt;/code&gt; と &lt;code&gt;dispatch_async()&lt;/code&gt; で指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), {
    // グローバルキューで実行される

    dispatch_async(dispatch_get_main_queue(), {
        // メインキューで実行される
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dispatch_sync()&lt;/code&gt; で処理を追加すると同期的に実行されるので、追加した処理が終わるまで次の処理に進まない。逆に &lt;code&gt;dispatch_async()&lt;/code&gt; で追加された場合、追加された処理の実行完了を待たずに次の処理に進む。&lt;/p&gt;

&lt;p&gt;Swift の GCD については&lt;a href=&#34;http://qiita.com/ShoichiKuraoka/items/bb2a280688d29de3ff18&#34;&gt;Swift GCD入門&lt;/a&gt;という記事により詳しく書かれている。&lt;/p&gt;

&lt;h2 id=&#34;dispatchqueueクラスが追加された&#34;&gt;DispatchQueueクラスが追加された&lt;/h2&gt;

&lt;p&gt;これを&lt;a href=&#34;https://1000ch.net/posts/2016/swift-async-dispatcher.html&#34;&gt;iOS+Swiftの非同期処理のヘルパークラス&lt;/a&gt;のような形でラップしていたが、 Swift 3 からは &lt;a href=&#34;https://developer.apple.com/reference/dispatch/dispatchqueue&#34;&gt;&lt;code&gt;DispatchQueue&lt;/code&gt;&lt;/a&gt; というクラスが追加されている。これを使うと非同期処理は次のように書ける。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DispatchQueue.global().async {
    // グローバルキューで実行される

    DispatchQueue.main.async {
        // メインキューで実行される
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メインキューを取得する &lt;code&gt;dispatch_get_main_queue()&lt;/code&gt; は &lt;code&gt;DispatchQueue.main&lt;/code&gt; に対応し、グローバルキューを取得する &lt;code&gt;dispatch_get_global_queue()&lt;/code&gt; は &lt;code&gt;DispatchQueue.global()&lt;/code&gt; に対応する。グローバルキューの取得時の優先度指定は &lt;code&gt;DispatchQueue.global()&lt;/code&gt; に引数を渡せるようになっており、 enum の &lt;a href=&#34;https://developer.apple.com/reference/dispatch/dispatchqos.qosclass&#34;&gt;&lt;code&gt;DispatchQoS.QoSClass&lt;/code&gt;&lt;/a&gt; を指定する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;userInteractive&lt;/code&gt;: The user-interactive quality of service class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userInitiated&lt;/code&gt;: The user-initiated quality of service class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;: The default quality of service class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utility&lt;/code&gt;: The utility quality of service class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;: The background quality of service class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unspecified&lt;/code&gt;: The absence of a quality of service class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;取得したキューには &lt;code&gt;sync&lt;/code&gt; や &lt;code&gt;async&lt;/code&gt; 、 &lt;code&gt;asyncAfter&lt;/code&gt; といった関数が生えているので、同期で処理するのか非同期で処理するのかによって決める。&lt;/p&gt;

&lt;p&gt;これによって &lt;code&gt;AsyncDispatcher&lt;/code&gt; でやりたかった「より Swift らしいコード」は達成されてしまったので、こちらを使うようにした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHubのリポジトリをHerokuに自動でデプロイする</title>
      <link>https://1000ch.net/posts/2016/heroku-automatic-deploy.html</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/heroku-automatic-deploy.html</guid>
      <description>

&lt;h1 id=&#34;githubのリポジトリをherokuに自動でデプロイする&#34;&gt;GitHubのリポジトリをHerokuに自動でデプロイする&lt;/h1&gt;

&lt;p&gt;何事も自動が大事という前置きはさておき、GitHub のリポジトリへのコミットを契機に Heroku へ自動でデプロイを行いたい話。機能が存在していることは認識していたが、実際に使ってみたら便利だったのでメモ。といっても、難しいことはないので、詰まることもなかったが。&lt;/p&gt;

&lt;h2 id=&#34;heroku-gitによるデプロイ&#34;&gt;Heroku Gitによるデプロイ&lt;/h2&gt;

&lt;p&gt;Heroku にある Git リポジトリに変更をプッシュすると、それが &lt;code&gt;Procfile&lt;/code&gt; に沿ってデプロイされる。最も一般的というか基本的？だと思われる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/1000ch/cobra&#34;&gt;1000ch/cobra&lt;/a&gt; というプロジェクトを例に説明する。  Heroku にアプリケーションを作成すると、その名前で Git のリポジトリが作成される。今回は GitHub を &lt;code&gt;origin&lt;/code&gt; としているので、 Heroku のリモート名を &lt;code&gt;heroku&lt;/code&gt; とする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/1000ch/cobra.git
$ cd cobra
$ git remote add heroku https://git.heroku.com/cobra.git
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プッシュすると、それを検知して Heroku 側でデプロイが行われる。&lt;/p&gt;

&lt;h2 id=&#34;herokuとgithubを連携する&#34;&gt;HerokuとGitHubを連携する&lt;/h2&gt;

&lt;p&gt;Heroku に GitHub へのアクセス権を与えると、 GitHub リポジトリと Heroku アプリとの連携が可能になる。その後 &lt;a href=&#34;https://dashboard.heroku.com/apps&#34;&gt;Personal Apps&lt;/a&gt; から対象アプリを選び、 Deploy タブを選択すると Deployment method というデプロイ方法を選ぶセクションが見つかる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/heroku-automatic-deploy/deployment-method.png&#34; alt=&#34;Deployment method&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここで GitHub を選択して、連携したいリポジトリと接続する。すると次のように Automatic deploys のセクションに自動デプロイに関する設定が現れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/heroku-automatic-deploy/connect-to-github.png&#34; alt=&#34;Connect to GitHub&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セレクトボックスにはリポジトリのブランチが表示されるので、変更をチェックしてデプロイしたいブランチを選択する。また、Travis CI や CircleCI などの CI によるテストを待った上でデプロイしたい場合はすぐ下にある &lt;strong&gt;Wait for CI to pass before deploy&lt;/strong&gt; のチェックボックスにチェックを付ける。あとは &lt;strong&gt;Enable Automatic Deploys&lt;/strong&gt; のボタンを押すと設定が有効化される。&lt;/p&gt;

&lt;p&gt;手順としては Heroku へのプッシュがなくなっただけではあるが、この一手を省くのがキモ。 「Heroku へのプッシュを自動化する」ことも自動化できそうだが、 GitHub でリポジトリを管理しているのであれば、これが一番正攻法だろう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chromiumをインストールする手間を減らしたい</title>
      <link>https://1000ch.net/posts/2016/chromiup.html</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/chromiup.html</guid>
      <description>

&lt;h1 id=&#34;chromiumをインストールする手間を減らしたい&#34;&gt;Chromiumをインストールする手間を減らしたい&lt;/h1&gt;

&lt;p&gt;通常 Chromium をインストールするには &lt;a href=&#34;https://download-chromium.appspot.com/&#34;&gt;Download Chromium&lt;/a&gt; からアーカイブをダウンロードして解凍し、アプリケーションフォルダにコピーという手順だが、この手間をどうにか簡略化できないか考えていた。シェルスクリプトでもできるけど &lt;code&gt;npm&lt;/code&gt; でインストール出来ても良かろうと、 &lt;a href=&#34;https://github.com/1000ch/chromiup&#34;&gt;1000ch/chromiup&lt;/a&gt; という Node.js 製のコマンドラインツールを作った。&lt;/p&gt;

&lt;h2 id=&#34;インストールと使い方&#34;&gt;インストールと使い方&lt;/h2&gt;

&lt;p&gt;README に書いてある通りだが、 &lt;code&gt;npm&lt;/code&gt; でグローバルにインストールして、 &lt;code&gt;chromiup&lt;/code&gt; を実行するだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g chromiup
$ chromiup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると次のようにインジケータが表示され、ダウンロード→インストールが行われる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/chromiup/chromiup.gif&#34; alt=&#34;chromiup で Chromium をインストールする&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;chromum-に自動アップデートがないのは何故&#34;&gt;Chromum に自動アップデートがないのは何故？&lt;/h2&gt;

&lt;p&gt;Chrome や Chrome Canary については自動アップデートの機能があるが Chromium にはない。正確な情報か不明だが、&lt;a href=&#34;http://askubuntu.com/questions/166931/why-is-chromium-not-updated-automatically-as-firefox-is&#34;&gt;Why is Chromium not updated automatically as Firefox is?&lt;/a&gt; にかかれているような Multi Distribution も関係していそうではある。まぁ大抵の場合は Canary で事が足りるのでここまでして Chromium を最新に保つ必要はない気がする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevFest Tokyo 2016でWeb Componentsの話をした</title>
      <link>https://1000ch.net/posts/2016/devfest-tokyo-2016.html</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/devfest-tokyo-2016.html</guid>
      <description>

&lt;h1 id=&#34;devfest-tokyo-2016でweb-componentsの話をした&#34;&gt;DevFest Tokyo 2016でWeb Componentsの話をした&lt;/h1&gt;

&lt;p&gt;10月9日に開催された &lt;a href=&#34;http://gdg-tokyo.connpass.com/event/38927/&#34;&gt;DevFest Tokyo 2016&lt;/a&gt; に出演しました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;先程の Web セッションのスライドです！ / &amp;quot;Web Components 2016 &amp;amp; Polymer v2&amp;quot; &lt;a href=&#34;https://t.co/hPlKgYINdP&#34;&gt;https://t.co/hPlKgYINdP&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/devfest16?src=hash&#34;&gt;#devfest16&lt;/a&gt;&lt;/p&gt;&amp;mdash; 1000ch (@1000ch) &lt;a href=&#34;https://twitter.com/1000ch/status/785015190576173056&#34;&gt;2016年10月9日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;2016年現在の Web Components と、来週に迫った Polymer Summit 2016 で発表されるであろう Polymer v2 の
話をしました。改めて文字起こしをする予定なので詳細は割愛しますが、&lt;a href=&#34;https://1000ch.github.io/slide/webcomponents-2016/&#34;&gt;スライドは既に公開してある&lt;/a&gt;（実は当日の一週間前からしてあったけど）ので、v0からの変更点は感じ取れるかと思います。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;281fd0b34e4043bea8bf8389f78dc93c&#34; data-ratio=&#34;1.6&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;当日は &lt;a href=&#34;https://abemafresh.tv/&#34;&gt;FRESH!&lt;/a&gt; でリアルタイム配信があったようなので、興味のある人はそちらもどうぞ。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://abemafresh.tv/embed/45509&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://html5experts.jp/series/web-components-2/&#34;&gt;基礎からわかる Web Components 徹底解説 〜仕様から実装まで理解する〜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/extendthewebforward&#34;&gt;Extensible Web の夜明けと開発者が得た可能性の話 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/custom-elements/&#34;&gt;Custom Elements W3C Working Draft 02 October 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/shadow-dom/&#34;&gt;Shadow DOM W3C Working Draft 30 August 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/html-imports/&#34;&gt;HTML Imports W3C Working Draft 25 February 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/html5/scripting-1.html#the-template-element&#34;&gt;The template element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hayato.io/2016/shadowdomv1/&#34;&gt;What&amp;rsquo;s New in Shadow DOM v1 (by examples)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/webcomponents/issues&#34;&gt;w3c/webcomponents/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2014/12/mozilla-and-web-components/&#34;&gt;Mozilla and Web Components: Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2015/06/the-state-of-web-components/&#34;&gt;The state of Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6263785-shadow-dom-unprefixed&#34;&gt;Shadow DOM (unprefixed) – Welcome to the Windows developer feedback site!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261298-custom-elements&#34;&gt;Custom Elements – Welcome to the Windows developer feedback site!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.polymer-project.org/1.0/blog/2016-09-09-polymer-2.0&#34;&gt;Polymer 2.0 Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoichiro6642/items/b08fe6adc547e6c9d49e&#34;&gt;Polymer 2.0 Preview (日本語訳)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/webcomponents/shadydom&#34;&gt;ShadyDOM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kindle Paperwhiteを買った</title>
      <link>https://1000ch.net/posts/2016/kindle-paperwhite.html</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/kindle-paperwhite.html</guid>
      <description>

&lt;h1 id=&#34;kindle-paperwhiteを買った&#34;&gt;Kindle Paperwhiteを買った&lt;/h1&gt;

&lt;p&gt;先月に &lt;a href=&#34;https://www.amazon.co.jp/dp/B00QJDQM9U/?tag=1000ch-22&#34;&gt;Kindle Paperwhite&lt;/a&gt; を購入していた。 &lt;a href=&#34;https://www.amazon.co.jp/dp/B010EJWHUC/?tag=1000ch-22&#34;&gt;Kindle Oasis&lt;/a&gt; と迷ったが、最終的には両者価格差がアップグレード内容に見合わない気がして Paperwhite を選んだ。 Kindle と Kindle Paperwhite は、時折開催されるプライム会員セールの割引対象になるので、それを狙うのも良い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/kindle-paperwhite/paperwhite.jpg&#34; alt=&#34;Kindle Paperwhite&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/kindle-paperwhite/starting.jpg&#34; alt=&#34;起動中のKindle Paperwhite&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;kindleシリーズのスペック&#34;&gt;Kindleシリーズのスペック&lt;/h2&gt;

&lt;p&gt;詳細は&lt;a href=&#34;https://www.amazon.co.jp/dp/B00QJDQM9U/?tag=1000ch-22#kindle-compare&#34;&gt;公式ページの比較表&lt;/a&gt;を見てもらうとして、どうしても外せない機能は内蔵ライトくらいだった。Paperwhite の内蔵ライトは Oasis に比べてライトの数が少なくて明るさにムラがあるとのことだが、今のところ気になる程度ではない。&lt;/p&gt;

&lt;p&gt;解像度は Paperwhite 以降は同じ 300ppi だし、ディスプレイやストレージのサイズも同じ。バッテリーについては Paperwhite が数週間で Oasis が数ヶ月ということで大きく差がありそうだが、主に布団に潜って寝るまでに読む用途で使っており、持ち歩いて使う頻度は少ないので全く気にならない。 Voyage と Oasis にはページ送りの物理ボタンがついており、タッチパネルを指フリックでページ送りするのは少し面倒なので、これは確かに便利そう。重さについては Paperwhite が 205g なのに対して Oasis は 131g （持ち手側の重心）と魅力的である。&lt;/p&gt;

&lt;h2 id=&#34;使った感想と後悔&#34;&gt;使った感想と後悔&lt;/h2&gt;

&lt;p&gt;Oasis を使えば「こちらのほうが良い」と確実になるだろうけど、使っている分には Paperwhite のスペックで不都合はなく満足してしまっているというのが現状である。「どうせ買うなら良いものを」という気持ちで奮発しても良かったけど Paperwhite → Oasis で上乗せされる額が大きいし、それなら PS4 を買うなぁと思いつつ（ &lt;a href=&#34;http://rebuild.fm/142/&#34;&gt;Rebuild: 142: Creative Manager (naoya)&lt;/a&gt; より ）。&lt;/p&gt;

&lt;p&gt;店舗等で実際に両者を比較できなかったのもある。最近 Amazon は店舗での販売をやめたようで家電量販店では順次撤退が進んでいるので、手にとって試す機会は今後もないかもしれない。&lt;/p&gt;

&lt;div class=&#34;Media Media--affiliate&#34;&gt;
  &lt;img class=&#34;Media__Figure&#34; src=&#34;https://images-na.ssl-images-amazon.com/images/I/51ch0nsLq3L._SX425_.jpg&#34;&gt;
  &lt;div class=&#34;Media__Body&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/dp/B00QJDQM9U/?tag=1000ch-22&#34; target=&#34;_blank&#34;&gt;
      &lt;h4 class=&#34;Media__Title&#34;&gt;Kindle Paperwhite Wi-Fi 、ブラック、キャンペーン情報つき&lt;/h4&gt;
    &lt;/a&gt;
    &lt;p&gt;
      カラーは定番のブラックに新色のホワイト&lt;br&gt;
      小さな文字もくっきりキレイ。300ppiの高解像度で今まで以上に美しく&lt;br&gt;
      直接目を照らさないフロントライト方式で、目に優しい&lt;br&gt;
      紙のように読みやすいEインクで長時間の読書も疲れにくい&lt;br&gt;
      軽くて持ちやすいから、通勤・通学中も片手で読書&lt;br&gt;
      本棚のスペースに困らない。数千冊がこの一台に(一般的な書籍の場合)&lt;br&gt;
      最新のベストセラーなど豊富な品ぞろえを低価格で。無料で読める名作も&lt;br&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;Media Media--affiliate&#34;&gt;
  &lt;img class=&#34;Media__Figure&#34; src=&#34;https://images-na.ssl-images-amazon.com/images/I/710l%2BPakGvL._SX425_.jpg&#34;&gt;
  &lt;div class=&#34;Media__Body&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/dp/B010EJWHUC/?tag=1000ch-22&#34; target=&#34;_blank&#34;&gt;
      &lt;h4 class=&#34;Media__Title&#34;&gt;Kindle Oasis Wi-Fi バッテリー内蔵レザーカバー付属 ブラック キャンペーン情報つきモデル&lt;/h4&gt;
    &lt;/a&gt;
    &lt;p&gt;
      Kindle史上、最も薄く、最も軽い - 長時間の読書もこれまでにないほど快適に&lt;br&gt;
      ボタンのひとつにいたるまで人間工学に基づいて刷新されたデザイン&lt;br&gt;
      Kindleシリーズ最長のバッテリー駆動時間。付属のバッテリー内蔵レザーカバーで、数か月充電不要(*)&lt;br&gt;
      300 ppiの高解像度で文字はくっきり美しく。明るい日差しの下でも光の反射を気にせず本物の紙のように読みやすい&lt;br&gt;
      目に優しい「フロントライト」がさらに進化。LEDを60%多く使用し、さらにスクリーンの明るさが均一に&lt;br&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GitHub Japanを訪問してきた</title>
      <link>https://1000ch.net/posts/2016/github-japan.html</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 UTC</pubDate>
      
      <guid>https://1000ch.net/posts/2016/github-japan.html</guid>
      <description>

&lt;h1 id=&#34;github-japanを訪問してきた&#34;&gt;GitHub Japanを訪問してきた&lt;/h1&gt;

&lt;p&gt;芝大門にある GitHub Japan を訪問してきた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/entrance.jpg&#34; alt=&#34;エントランス&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub のワークスタイルがリモートワークベースということもあり、出社率は高くないらしいが、ビルの1フロアを借り切ったコンパクトで可愛らしいオフィスだった。&lt;/p&gt;

&lt;h2 id=&#34;応接スペース的な&#34;&gt;応接スペース的な&lt;/h2&gt;

&lt;p&gt;テーブルの上には WEB+DB PRESS をはじめ各種雑誌が散らばっていた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/reception.jpg&#34; alt=&#34;応接スペース&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;フロアの中央に陣取る和室&#34;&gt;フロアの中央に陣取る和室&lt;/h2&gt;

&lt;p&gt;フロアの中央に和室の区画がある。某氏の占領頻度が多くてもはや専用ルーム化しているとかしていないとか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/room.jpg&#34; alt=&#34;和室&#34; /&gt;&lt;/p&gt;

&lt;p&gt;和室の外側はこのようなオレンジの壁。窓に&lt;a href=&#34;https://github.myshopify.com/products/octocat-figurine&#34;&gt;オクトキャット&lt;/a&gt;が飾られていた。世界各国の拠点のオフィスも、オレンジ配色が多いらしい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/wall.jpg&#34; alt=&#34;中央スペースに陣取る部屋の壁&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ミーティングルーム&#34;&gt;ミーティングルーム&lt;/h2&gt;

&lt;p&gt;オクトキャットでコーティングされているミーティングルーム。中身は写してないけど、壁に大きなディスプレイが貼り付けられていて世界各国の拠点と繋いでビデオチャットをするらしい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/meeting-room.jpg&#34; alt=&#34;ミーティングルーム&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;壁に無造作に立てかけられた Hubot のポスター。これは&lt;a href=&#34;https://github.myshopify.com/products/posters&#34;&gt;GitHub Shopでも販売されている&lt;/a&gt;ものだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://1000ch.net/img/posts/2016/github-japan/poster.jpg&#34; alt=&#34;ポスター&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとはトイレ・キッチン・備品ルームなどもあった。デスク＋チェアが並んでいるいわゆる作業スペースもあったが、写ってはいけない物が写るといけないので自重した。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>